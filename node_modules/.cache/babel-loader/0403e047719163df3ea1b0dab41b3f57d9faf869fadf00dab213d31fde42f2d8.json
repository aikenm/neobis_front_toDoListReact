{"ast":null,"code":"var _jsxFileName = \"/Users/aikenmanasbekov/neobis_front_toDoListReact/neobis-front-todolist-react/src/components/TaskList.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TaskList({\n  tasks,\n  onDelete,\n  onEdit,\n  onComplete\n}) {\n  _s();\n  const handleEdit = (index, newText) => {\n    onEdit(index, newText);\n  };\n  const editableLabelRef = useRef(null);\n  useEffect(() => {\n    if (editableLabelRef.current) {\n      if (tasks.some(task => task.isEditing)) {\n        editableLabelRef.current.focus();\n        const range = document.createRange();\n        range.selectNodeContents(editableLabelRef.current);\n        range.collapse(false);\n        const selection = window.getSelection();\n        selection.removeAllRanges();\n        selection.addRange(range);\n      }\n    }\n  }, [tasks]);\n  return /*#__PURE__*/_jsxDEV(\"ul\", {\n    className: \"taskList\",\n    children: tasks.map((task, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n      className: task.category,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\",\n        checked: task.checked,\n        onChange: () => onComplete(index)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 11\n      }, this), task.isEditing ? /*#__PURE__*/_jsxDEV(\"label\", {\n        className: `taskText editable`,\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          ref: editableLabelRef,\n          className: `editable-input`,\n          defaultValue: task.text,\n          onBlur: e => handleEdit(index, e.target.value),\n          autoFocus: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this) : /*#__PURE__*/_jsxDEV(\"label\", {\n        className: `taskText ${task.checked ? 'completed' : ''}`,\n        children: task.text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"edit-button\",\n        onClick: () => handleEdit(index, 'newEditedText'),\n        children: \"Edit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"delete-button\",\n        onClick: () => onDelete(index),\n        children: \"Delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n}\n_s(TaskList, \"XBZ+ZGrANIOk4JyFtYp/LcE3IiQ=\");\n_c = TaskList;\nexport default TaskList;\nvar _c;\n$RefreshReg$(_c, \"TaskList\");","map":{"version":3,"names":["React","useRef","useEffect","jsxDEV","_jsxDEV","TaskList","tasks","onDelete","onEdit","onComplete","_s","handleEdit","index","newText","editableLabelRef","current","some","task","isEditing","focus","range","document","createRange","selectNodeContents","collapse","selection","window","getSelection","removeAllRanges","addRange","className","children","map","category","type","checked","onChange","fileName","_jsxFileName","lineNumber","columnNumber","ref","defaultValue","text","onBlur","e","target","value","autoFocus","onClick","_c","$RefreshReg$"],"sources":["/Users/aikenmanasbekov/neobis_front_toDoListReact/neobis-front-todolist-react/src/components/TaskList.js"],"sourcesContent":["import React, { useRef, useEffect } from 'react';\n\nfunction TaskList({ tasks, onDelete, onEdit, onComplete }) {\n\n    const handleEdit = (index, newText) => {\n        onEdit(index, newText);\n    };\n\n    const editableLabelRef = useRef(null);\n   \n    useEffect(() => {\n        if (editableLabelRef.current) {\n          if (tasks.some(task => task.isEditing)) {\n            editableLabelRef.current.focus();\n            const range = document.createRange();\n            range.selectNodeContents(editableLabelRef.current);\n            range.collapse(false); \n            const selection = window.getSelection();\n            selection.removeAllRanges();\n            selection.addRange(range);\n          }\n        }\n      }, [tasks]);\n\n  return (\n    <ul className=\"taskList\">\n     {tasks.map((task, index) => (\n        <li key={index} className={task.category}>\n          <input\n            type=\"checkbox\"\n            checked={task.checked}\n            onChange={() => onComplete(index)}\n          />\n          {task.isEditing ? (\n        <label className={`taskText editable`}>\n          <input\n            ref={editableLabelRef}\n            className={`editable-input`}\n            defaultValue={task.text}\n            onBlur={(e) => handleEdit(index, e.target.value)}\n            autoFocus\n          />\n        </label>\n      ) : (\n        <label className={`taskText ${task.checked ? 'completed' : ''}`}>\n          {task.text}\n        </label>\n      )}\n          <button className=\"edit-button\" onClick={() => handleEdit(index, 'newEditedText')}>\n            Edit\n          </button>\n          <button className=\"delete-button\" onClick={() => onDelete(index)}>\n            Delete\n          </button>\n        </li> \n      ))}\n    </ul>\n  );\n}\n\nexport default TaskList;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}