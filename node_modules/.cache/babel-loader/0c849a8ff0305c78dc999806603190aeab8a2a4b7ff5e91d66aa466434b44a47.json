{"ast":null,"code":"var _jsxFileName = \"/Users/aikenmanasbekov/neobis_front_toDoListReact/neobis-front-todolist-react/src/components/EditableName.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EditableName() {\n  _s();\n  const [isPlaceholder, setIsPlaceholder] = useState(true);\n  const handleFocus = () => {\n    if (isPlaceholder) {\n      setIsPlaceholder(false);\n      // Clear the content when the user clicks to edit\n      document.getElementById('editableName').textContent = '';\n    }\n  };\n  const handleBlur = () => {\n    const editableName = document.getElementById('editableName');\n    if (editableName.textContent.trim() === '') {\n      setIsPlaceholder(true);\n      // Restore placeholder text when content is empty on blur\n      editableName.textContent = 'Your name';\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"span\", {\n    className: `name ${isPlaceholder ? 'placeholder' : ''}`,\n    contentEditable: \"true\",\n    id: \"editableName\",\n    onFocus: handleFocus,\n    onBlur: handleBlur,\n    children: isPlaceholder ? 'Your name' : ''\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n}\n_s(EditableName, \"PKKrAyTUgQXUGkbLl/HxsI5Jxt8=\");\n_c = EditableName;\nexport default EditableName;\nvar _c;\n$RefreshReg$(_c, \"EditableName\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","EditableName","_s","isPlaceholder","setIsPlaceholder","handleFocus","document","getElementById","textContent","handleBlur","editableName","trim","className","contentEditable","id","onFocus","onBlur","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/aikenmanasbekov/neobis_front_toDoListReact/neobis-front-todolist-react/src/components/EditableName.js"],"sourcesContent":["import React, { useState } from 'react';\n\nfunction EditableName() {\n  const [isPlaceholder, setIsPlaceholder] = useState(true);\n\n  const handleFocus = () => {\n    if (isPlaceholder) {\n      setIsPlaceholder(false);\n      // Clear the content when the user clicks to edit\n      document.getElementById('editableName').textContent = '';\n    }\n  };\n\n  const handleBlur = () => {\n    const editableName = document.getElementById('editableName');\n    if (editableName.textContent.trim() === '') {\n      setIsPlaceholder(true);\n      // Restore placeholder text when content is empty on blur\n      editableName.textContent = 'Your name';\n    }\n  };\n\n  return (\n    <span\n      className={`name ${isPlaceholder ? 'placeholder' : ''}`}\n      contentEditable=\"true\"\n      id=\"editableName\"\n      onFocus={handleFocus}\n      onBlur={handleBlur}\n    >\n      {isPlaceholder ? 'Your name' : ''}\n    </span>\n  );\n}\n\nexport default EditableName;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,SAASC,YAAYA,CAAA,EAAG;EAAAC,EAAA;EACtB,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGN,QAAQ,CAAC,IAAI,CAAC;EAExD,MAAMO,WAAW,GAAGA,CAAA,KAAM;IACxB,IAAIF,aAAa,EAAE;MACjBC,gBAAgB,CAAC,KAAK,CAAC;MACvB;MACAE,QAAQ,CAACC,cAAc,CAAC,cAAc,CAAC,CAACC,WAAW,GAAG,EAAE;IAC1D;EACF,CAAC;EAED,MAAMC,UAAU,GAAGA,CAAA,KAAM;IACvB,MAAMC,YAAY,GAAGJ,QAAQ,CAACC,cAAc,CAAC,cAAc,CAAC;IAC5D,IAAIG,YAAY,CAACF,WAAW,CAACG,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;MAC1CP,gBAAgB,CAAC,IAAI,CAAC;MACtB;MACAM,YAAY,CAACF,WAAW,GAAG,WAAW;IACxC;EACF,CAAC;EAED,oBACER,OAAA;IACEY,SAAS,EAAG,QAAOT,aAAa,GAAG,aAAa,GAAG,EAAG,EAAE;IACxDU,eAAe,EAAC,MAAM;IACtBC,EAAE,EAAC,cAAc;IACjBC,OAAO,EAAEV,WAAY;IACrBW,MAAM,EAAEP,UAAW;IAAAQ,QAAA,EAElBd,aAAa,GAAG,WAAW,GAAG;EAAE;IAAAe,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC7B,CAAC;AAEX;AAACnB,EAAA,CA/BQD,YAAY;AAAAqB,EAAA,GAAZrB,YAAY;AAiCrB,eAAeA,YAAY;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}