{"ast":null,"code":"var _jsxFileName = \"/Users/aikenmanasbekov/neobis_front_toDoListReact/neobis-front-todolist-react/src/components/TaskList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TaskList({\n  tasks,\n  onDelete,\n  onEdit,\n  onComplete\n}) {\n  _s();\n  const handleEdit = (index, newText) => {\n    const updatedTasks = [...tasks];\n    updatedTasks[index].text = newText;\n    updatedTasks[index].isEditing = false;\n    setTasks(updatedTasks);\n  };\n  const handleEditButtonClick = index => {\n    handleEdit(index, 'newEditedText');\n  };\n  const editableLabelRefs = useRef([]);\n  useEffect(() => {\n    tasks.forEach((task, index) => {\n      if (task.isEditing && editableLabelRefs.current[index]) {\n        editableLabelRefs.current[index].focus();\n        const range = document.createRange();\n        range.selectNodeContents(editableLabelRefs.current[index]);\n        range.collapse(false);\n        const selection = window.getSelection();\n        selection.removeAllRanges();\n        selection.addRange(range);\n      }\n    });\n  }, [tasks]);\n  return /*#__PURE__*/_jsxDEV(\"ul\", {\n    className: \"taskList\",\n    children: tasks.map((task, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n      className: task.category,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\",\n        checked: task.completed,\n        onChange: () => onComplete(index)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        ref: el => editableLabelRefs.current[index] = el,\n        className: `taskText ${task.isEditing ? 'editable' : ''} ${task.completed ? 'completed' : ''}`,\n        contentEditable: task.isEditing,\n        children: task.text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"edit-button\",\n        onClick: () => handleEditButtonClick(index),\n        children: task.isEditing ? '✔' : 'Edit'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"delete-button\",\n        onClick: () => onDelete(index),\n        children: \"Delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n}\n_s(TaskList, \"IYWkhPuPqwrL0yxpLoXD+C1kjGw=\");\n_c = TaskList;\nexport default TaskList;\nvar _c;\n$RefreshReg$(_c, \"TaskList\");","map":{"version":3,"names":["React","useState","useRef","useEffect","jsxDEV","_jsxDEV","TaskList","tasks","onDelete","onEdit","onComplete","_s","handleEdit","index","newText","updatedTasks","text","isEditing","setTasks","handleEditButtonClick","editableLabelRefs","forEach","task","current","focus","range","document","createRange","selectNodeContents","collapse","selection","window","getSelection","removeAllRanges","addRange","className","children","map","category","type","checked","completed","onChange","fileName","_jsxFileName","lineNumber","columnNumber","ref","el","contentEditable","onClick","_c","$RefreshReg$"],"sources":["/Users/aikenmanasbekov/neobis_front_toDoListReact/neobis-front-todolist-react/src/components/TaskList.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\n\nfunction TaskList({ tasks, onDelete, onEdit, onComplete }) {\n    const handleEdit = (index, newText) => {\n        const updatedTasks = [...tasks]; \n        updatedTasks[index].text = newText; \n        updatedTasks[index].isEditing = false; \n        setTasks(updatedTasks); \n      };\n      \n\n  const handleEditButtonClick = (index) => {\n    handleEdit(index, 'newEditedText');\n  };\n\n  const editableLabelRefs = useRef([]);\n\n  useEffect(() => {\n    tasks.forEach((task, index) => {\n      if (task.isEditing && editableLabelRefs.current[index]) {\n        editableLabelRefs.current[index].focus();\n        const range = document.createRange();\n        range.selectNodeContents(editableLabelRefs.current[index]);\n        range.collapse(false);\n        const selection = window.getSelection();\n        selection.removeAllRanges();\n        selection.addRange(range);\n      }\n    });\n  }, [tasks]);\n\n  return (\n    <ul className=\"taskList\">\n      {tasks.map((task, index) => (\n        <li key={index} className={task.category}>\n          <input\n            type=\"checkbox\"\n            checked={task.completed}\n            onChange={() => onComplete(index)}\n          />\n          <label\n            ref={(el) => (editableLabelRefs.current[index] = el)}\n            className={`taskText ${task.isEditing ? 'editable' : ''} ${\n              task.completed ? 'completed' : ''\n            }`}\n            contentEditable={task.isEditing}\n          >\n            {task.text}\n          </label>\n          <button className=\"edit-button\" onClick={() => handleEditButtonClick(index)}>\n            {task.isEditing ? '✔' : 'Edit'}\n          </button>\n          <button className=\"delete-button\" onClick={() => onDelete(index)}>\n            Delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n}\n\nexport default TaskList;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}