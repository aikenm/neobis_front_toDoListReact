{"ast":null,"code":"var _jsxFileName = \"/Users/aikenmanasbekov/neobis_front_toDoListReact/neobis-front-todolist-react/src/components/TaskList.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TaskList({\n  tasks,\n  onDelete,\n  onEdit,\n  onComplete\n}) {\n  _s();\n  const editableLabelRef = useRef(null);\n  const handleEdit = (index, newText) => {\n    onEdit(index, newText);\n  };\n  const handleEditButtonClick = index => {\n    const newTasks = [...tasks];\n    newTasks[index].isEditing = !newTasks[index].isEditing; // Toggle editing state\n\n    // Update the tasks with the modified editing state\n\n    handleEdit(index, 'newEditedText'); // Call your edit function here\n  };\n\n  useEffect(() => {\n    if (editableLabelRef.current) {\n      if (tasks.some(task => task.isEditing)) {\n        editableLabelRef.current.focus();\n        const range = document.createRange();\n        range.selectNodeContents(editableLabelRef.current);\n        range.collapse(false);\n        const selection = window.getSelection();\n        selection.removeAllRanges();\n        selection.addRange(range);\n      }\n    }\n  }, [tasks]);\n  return /*#__PURE__*/_jsxDEV(\"ul\", {\n    className: \"taskList\",\n    children: tasks.map((task, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n      className: task.category,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\",\n        checked: task.completed,\n        onChange: () => onComplete(index)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        ref: task.isEditing ? editableLabelRef : null,\n        className: `taskText ${task.isEditing ? 'editable' : ''} ${task.completed ? 'completed' : ''}`,\n        contentEditable: task.isEditing,\n        children: task.text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"edit-button\",\n        onClick: () => handleEditButtonClick(index),\n        children: [task.isEditing ? '✔' : 'Edit', \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"delete-button\",\n        onClick: () => onDelete(index),\n        children: \"Delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n}\n_s(TaskList, \"XBZ+ZGrANIOk4JyFtYp/LcE3IiQ=\");\n_c = TaskList;\nexport default TaskList;\nvar _c;\n$RefreshReg$(_c, \"TaskList\");","map":{"version":3,"names":["React","useRef","useEffect","useState","jsxDEV","_jsxDEV","TaskList","tasks","onDelete","onEdit","onComplete","_s","editableLabelRef","handleEdit","index","newText","handleEditButtonClick","newTasks","isEditing","current","some","task","focus","range","document","createRange","selectNodeContents","collapse","selection","window","getSelection","removeAllRanges","addRange","className","children","map","category","type","checked","completed","onChange","fileName","_jsxFileName","lineNumber","columnNumber","ref","contentEditable","text","onClick","_c","$RefreshReg$"],"sources":["/Users/aikenmanasbekov/neobis_front_toDoListReact/neobis-front-todolist-react/src/components/TaskList.js"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\n\nfunction TaskList({ tasks, onDelete, onEdit, onComplete }) {\n  const editableLabelRef = useRef(null);\n\n  const handleEdit = (index, newText) => {\n    onEdit(index, newText);\n  };\n\n  const handleEditButtonClick = (index) => {\n    const newTasks = [...tasks];\n    newTasks[index].isEditing = !newTasks[index].isEditing; // Toggle editing state\n\n    // Update the tasks with the modified editing state\n\n    \n    handleEdit(index, 'newEditedText'); // Call your edit function here\n  };\n\n  useEffect(() => {\n    if (editableLabelRef.current) {\n      if (tasks.some(task => task.isEditing)) {\n        editableLabelRef.current.focus();\n        const range = document.createRange();\n        range.selectNodeContents(editableLabelRef.current);\n        range.collapse(false);\n        const selection = window.getSelection();\n        selection.removeAllRanges();\n        selection.addRange(range);\n      }\n    }\n  }, [tasks]);\n\n  return (\n    <ul className=\"taskList\">\n      {tasks.map((task, index) => (\n        <li key={index} className={task.category}>\n          <input\n            type=\"checkbox\"\n            checked={task.completed}\n            onChange={() => onComplete(index)}\n          />\n          <label\n            ref={task.isEditing ? editableLabelRef : null}\n            className={`taskText ${task.isEditing ? 'editable' : ''} ${task.completed ? 'completed' : ''}`}\n            contentEditable={task.isEditing}\n          >\n            {task.text}\n          </label>\n          <button className=\"edit-button\" onClick={() => handleEditButtonClick(index)}>\n            {task.isEditing ? '✔' : 'Edit'} {/* Change text based on editing state */}\n          </button>\n          <button className=\"delete-button\" onClick={() => onDelete(index)}>\n            Delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n}\n\nexport default TaskList;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}