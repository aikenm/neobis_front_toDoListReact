{"ast":null,"code":"var _jsxFileName = \"/Users/aikenmanasbekov/neobis_front_toDoListReact/neobis-front-todolist-react/src/components/TaskList.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TaskList({\n  tasks,\n  onDelete,\n  onEdit,\n  onComplete\n}) {\n  _s();\n  const handleEdit = (index, newText) => {\n    onEdit(index, newText);\n  };\n  const handleComplete = index => {\n    const updatedTasks = tasks.map((task, i) => {\n      if (i === index) {\n        return {\n          ...task,\n          completed: !task.completed\n        };\n      }\n      return task;\n    });\n\n    // Call a function to update the tasks state in the parent component\n    onUpdateTasks(updatedTasks);\n  };\n  const editableLabelRef = useRef(null);\n  useEffect(() => {\n    if (editableLabelRef.current) {\n      if (tasks.some(task => task.isEditing)) {\n        editableLabelRef.current.focus();\n        const range = document.createRange();\n        range.selectNodeContents(editableLabelRef.current);\n        range.collapse(false);\n        const selection = window.getSelection();\n        selection.removeAllRanges();\n        selection.addRange(range);\n      }\n    }\n  }, [tasks]);\n  return /*#__PURE__*/_jsxDEV(\"ul\", {\n    className: \"taskList\",\n    children: tasks.map((task, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n      className: task.category,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\",\n        checked: task.checked,\n        onChange: () => onComplete(index)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        ref: task.isEditing ? editableLabelRef : null,\n        className: `taskText ${task.isEditing ? 'editable' : ''}`,\n        contentEditable: task.isEditing,\n        children: task.text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"edit-button\",\n        onClick: () => handleEdit(index, 'newEditedText'),\n        children: \"Edit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"delete-button\",\n        onClick: () => onDelete(index),\n        children: \"Delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n}\n_s(TaskList, \"XBZ+ZGrANIOk4JyFtYp/LcE3IiQ=\");\n_c = TaskList;\nexport default TaskList;\nvar _c;\n$RefreshReg$(_c, \"TaskList\");","map":{"version":3,"names":["React","useRef","useEffect","jsxDEV","_jsxDEV","TaskList","tasks","onDelete","onEdit","onComplete","_s","handleEdit","index","newText","handleComplete","updatedTasks","map","task","i","completed","onUpdateTasks","editableLabelRef","current","some","isEditing","focus","range","document","createRange","selectNodeContents","collapse","selection","window","getSelection","removeAllRanges","addRange","className","children","category","type","checked","onChange","fileName","_jsxFileName","lineNumber","columnNumber","ref","contentEditable","text","onClick","_c","$RefreshReg$"],"sources":["/Users/aikenmanasbekov/neobis_front_toDoListReact/neobis-front-todolist-react/src/components/TaskList.js"],"sourcesContent":["import React, { useRef, useEffect } from 'react';\n\nfunction TaskList({ tasks, onDelete, onEdit, onComplete }) {\n\n    const handleEdit = (index, newText) => {\n        onEdit(index, newText);\n    };\n\n    const handleComplete = (index) => {\n        const updatedTasks = tasks.map((task, i) => {\n          if (i === index) {\n            return { ...task, completed: !task.completed };\n          }\n          return task;\n        });\n      \n        // Call a function to update the tasks state in the parent component\n        onUpdateTasks(updatedTasks);\n      };\n      \n\n    const editableLabelRef = useRef(null);\n   \n    useEffect(() => {\n        if (editableLabelRef.current) {\n          if (tasks.some(task => task.isEditing)) {\n            editableLabelRef.current.focus();\n            const range = document.createRange();\n            range.selectNodeContents(editableLabelRef.current);\n            range.collapse(false); \n            const selection = window.getSelection();\n            selection.removeAllRanges();\n            selection.addRange(range);\n          }\n        }\n      }, [tasks]);\n\n  return (\n    <ul className=\"taskList\">\n     {tasks.map((task, index) => (\n        <li key={index} className={task.category}>\n          <input\n            type=\"checkbox\"\n            checked={task.checked}\n            onChange={() => onComplete(index)}\n          />\n          <label\n            ref={task.isEditing ? editableLabelRef : null}\n            className={`taskText ${task.isEditing ? 'editable' : ''}`}\n            contentEditable={task.isEditing}\n          >\n            {task.text}\n          </label>\n          <button className=\"edit-button\" onClick={() => handleEdit(index, 'newEditedText')}>\n            Edit\n          </button>\n          <button className=\"delete-button\" onClick={() => onDelete(index)}>\n            Delete\n          </button>\n        </li> \n      ))}\n    </ul>\n  );\n}\n\nexport default TaskList;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}